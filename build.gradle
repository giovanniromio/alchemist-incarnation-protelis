apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'project-report'
apply plugin: 'maven'
apply plugin: 'build-dashboard'
apply plugin: 'signing'

sourceCompatibility = 1.8
targetCompatibility = 1.8

task wrapper(type: Wrapper) {
    gradleVersion = gradleVersionToUse
}

// General configuration

jar {
    manifest {
        attributes 'Implementation-Title': artifactId, 'Implementation-Version': version
    }
}

repositories {
    mavenCentral()
}

configurations.all {
  	resolutionStrategy {
		failOnVersionConflict()
		dependencySubstitution {
			substitute module('asm:asm') with module("org.ow2.asm:asm:$asmVersion")
			
			substitute module('org.ow2.asm:asm-commons:5.0.1') with module("org.ow2.asm:asm-commons:$asmVersion")
			substitute module('org.ow2.asm:asm-commons:5.0.2') with module("org.ow2.asm:asm-commons:$asmVersion")
			
			substitute module('com.google.guava:guava:[10.0.1,14.0.1]') with module('com.google.guava:guava-jdk5:14.0.1')
			substitute module('com.google.guava:guava:18.0') with module('com.google.guava:guava:[18.0, 19.0-rc1]')
			
		    substitute module('com.google.protobuf:protobuf-java:2.4.1') with module('com.google.protobuf:protobuf-java:2.6.1')
		    
		    substitute module('commons-io:commons-io:1.3.1') with module('commons-io:commons-io:[1.3.1, 3.0[')
		    
		    substitute module('commons-logging:commons-logging:1.0.4') with module('commons-logging:commons-logging:[1.0.4, 2[')
		    
			substitute module('log4j:log4j:1.2.15') with module('log4j:log4j:[1.2.15, 1.3[')
			substitute module('log4j:log4j:1.2.16') with module('log4j:log4j:[1.2.15, 1.3[')
			
		    substitute module('org.slf4j:slf4j-api:1.7.10') with module('org.slf4j:slf4j-api:[1.7.10, 1.8.0[')
		}
    }
}

configurations {
    doc {
        transitive false
    }
    compile {
        exclude module: 'org.eclipse.xtext.dependencies'
    }
    doclet
}

dependencies {
	compile "org.danilopianini:javalib-java7:$javalib7Version"
	compile "com.google.guava:guava:$guavaVersion"
	compile "org.protelis:protelis:$protelisVersion"
    compile "it.unibo.alchemist:alchemist-interfaces:$interfacesVersion"
    compile "it.unibo.alchemist:alchemist-baselib:$baselibVersion"
    compile "it.unibo.alchemist:alchemist-implementationbase:$implbaseVersion"
    compile "it.unibo.alchemist:alchemist-maps:$mapsVersion"
    compile "com.google.code.findbugs:findbugs:$findBugsVersion"
    
    testCompile "junit:junit:$junitVersion"
    testCompile "it.unibo.alchemist:alchemist.protelisdsl:$protelisdslVersion"
    testCompile "it.unibo.alchemist:alchemist-engine:$engineVersion"
    testRuntime "it.unibo.alchemist:alchemist-enginedependentmodel:$engineDepVersion"
    
    doclet "org.jboss.apiviz:apiviz:$apivizVersion"
    
    pmd(
        "net.sourceforge.pmd:pmd-core:$pmdVersion",
        "net.sourceforge.pmd:pmd-vm:$pmdVersion",
        "net.sourceforge.pmd:pmd-plsql:$pmdVersion",
        "net.sourceforge.pmd:pmd-jsp:$pmdVersion",
        "net.sourceforge.pmd:pmd-xml:$pmdVersion",
        "net.sourceforge.pmd:pmd-java:$pmdVersion"
    )
}

// Javadoc Configuration

task aggregateJavadoc(type: Javadoc) {
	source configurations.doc.collect { zipTree(it) }
    source sourceSets.main.allJava
    classpath = sourceSets.main.output + sourceSets.main.compileClasspath
    include '**/*.java'
    destinationDir file("$project.buildDir/docs/javadoc/")
    failOnError = false
    options.showAll()
    options.addBooleanOption('nopackagediagram', true)
	options.addStringOption('Xdoclint:none', '-quiet')
    configure(options) {
        windowTitle "$projectLongName version $project.version Javadoc API"
        docTitle "$projectLongName $project.version reference API"
        links 'http://docs.oracle.com/javase/8/docs/api/'
        links 'http://trove4j.sourceforge.net/javadocs/'
        doclet 'org.jboss.apiviz.APIviz'
        docletpath file(configurations.doclet.asPath)
    }
}

// Artifacts configuration

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: aggregateJavadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

// Eclipse configuration

eclipse {
	classpath {
    	downloadJavadoc = true
		downloadSources = true
	}
}

// FindBugs configuration

findbugs {
	ignoreFailures = true
	effort = "max"
	reportLevel = "low"
}

tasks.withType(FindBugs) {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}

// PMD configuration

pmd {
	ignoreFailures = true
	ruleSets = []
	ruleSetFiles = files("pmd.xml")
	targetJdk = pmdTargetJdk
	toolVersion = pmdVersion
}

tasks.withType(Pmd) {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}

// Checkstyle configuration

checkstyle {
	ignoreFailures = true
	configFile = new File("style.xml")
}

checkstyleMain << {
    ant.xslt(in: reports.xml.destination,
             style: new File("$project.projectDir/checkstyle-noframes-sorted.xsl"),
             out: new File(reports.xml.destination.parent, 'main.html'))
}

checkstyleTest << {
    ant.xslt(in: reports.xml.destination,
             style: new File("$project.projectDir/checkstyle-noframes-sorted.xsl"),
             out: new File(reports.xml.destination.parent, 'main.html'))
}

// Upload configuration

signArchives.onlyIf { Boolean.parseBoolean(signArchivesIsEnabled) }

uploadArchives {
	repositories {
    	mavenDeployer {
      		beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
      		repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        		authentication(userName: ossrhUsername, password: ossrhPassword)
      		}
      		snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        		authentication(userName: ossrhUsername, password: ossrhPassword)
      		}
		    pom.project {
	            name artifactId
	            description projectDescription
	            packaging 'jar'
	            url "$scmRootUrl/$artifactId"
	            licenses {
	                license {
	                    name licenseName
	                    url licenseUrl
	                }
	            }
	            developers {
	            	developer {
	            		name 'Danilo Pianini'
	            		email 'danilo.pianini@unibo.it'
	            		url 'http://danilopianini.apice.unibo.it/'
	            	}
	            	developer {
	            		name 'Jacob Beal'
	            		email 'jakebeal@bbn.com'
	            		url 'http://web.mit.edu/jakebeal/www/'
	            	}
	            }
	            scm {
	            	url "$scmRootUrl/$artifactId"
	            	connection "$scmType:$scmLogin/$scmRepoName"
	            	developerConnection "$scmType:$scmLogin/$scmRepoName"
	            }
		    }
    	}
  	}
}

defaultTasks 'wrapper', 'clean', 'build', 'check', 'assemble', 'install', 'aggregateJavadoc', 'buildDashboard'


